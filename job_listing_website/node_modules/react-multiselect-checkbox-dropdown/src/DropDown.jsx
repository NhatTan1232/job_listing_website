import { useState, useEffect, useRef } from "react";
import css from "./DropDown.module.css";

const DropDown = (
	options = [],
	id,
	onChangeHandler = (d) => console.log(d),
	selectAll = false,
	style = {}
) => {
	const dropDownRef = useRef("");
	const [isAllSelect, setIsAllSelect] = useState(false);
	const [stateOptions, setStateOptions] = useState([]);
	const [isDropdownDisplayed, setIsDropdownDisplayed] = useState(false);
	const [selectedStates, setSelectedStates] = useState({});

	const selectedValues = (obj) => {
		const result = [];
		for (let dt of stateOptions) {
			if (obj[dt.id]) {
				result.push(dt.value);
			}
		}
		onChangeHandler(result);
	};

	const isAllSelected = (obj) => {
		const objLen = Object.values(obj).length;
		const filterLen = Object.values(obj).filter((d) => d).length;
		setIsAllSelect(objLen === filterLen);
	};

	const selectAllChangeHandler = (e) => {
		const obj = stateOptions.reduce(
			(obj, state) => ({ ...obj, [state.id]: e.target.checked }),
			selectedStates
		);
		setIsAllSelect(e.target.checked);
		selectedValues(obj);
		setSelectedStates(obj);
	};

	const optionChangeHandler = (e) => {
		const obj = {
			...selectedStates,
			[e.target.name]: e.target.checked,
		};
		selectedValues(obj);
		isAllSelected(obj);
		setSelectedStates(obj);
	};

	const showLabels = () => {
		try {
			let str = "";
			for (const [key, value] of Object.entries(selectedStates)) {
				if (value) {
					if (str.length) {
						str += ", ";
					}
					str += stateOptions[key].label;
				}
			}
			str = str.length ? str : "Select";
			return str;
		} catch (err) {
			console.log(err.message);
			console.log(err.stack);
		}
	};

	useEffect(() => {
		document.addEventListener("click", closePanel, true);
		return () => {
			document.removeEventListener("click", closePanel, true);
		};
	}, []);

	useEffect(() => {
		const list = options.map((d, i) => ({ ...d, id: i }));
		setSelectedStates(
			list.reduce((obj, state) => ({ ...obj, [state.id]: false }), {})
		);
		setStateOptions(list);
	}, [options]);

	const closePanel = (e) => {
		if (!dropDownRef.current.contains(e.target)) {
			setIsDropdownDisplayed(false);
		}
	};

	return (
		<div
			ref={dropDownRef}
			id={id}
			className={css.stateDropdown}
			style={style?.stateDropdown}
		>
			<button
				className={css.dropDownBtn}
				onClick={() =>
					setIsDropdownDisplayed((prevState) => !prevState)
				}
				style={style?.dropDownBtn}
			>
				<span
					className={css.dropDownBtnText}
					style={style?.dropDownBtnText}
				>
					{showLabels()}
				</span>
			</button>
			{isDropdownDisplayed && (
				<div className={css.dropDownPanel} style={style?.dropDownPanel}>
					{stateOptions.length > 0 && selectAll ? (
						<div className={css.ddOption} key={`ddOption`}>
							<input
								className={css.ddOptionCheck}
								key={`ddOptionCheck`}
								type="checkbox"
								onChange={selectAllChangeHandler}
								checked={isAllSelect}
								style={style?.ddOptionCheck}
							/>
							<span
								className={css.ddOptionText}
								key={`ddOptionText`}
								style={style?.ddOptionText}
							>
								Select All
							</span>
						</div>
					) : null}
					{stateOptions.length ? (
						stateOptions.map((d, i) => (
							<div className={css.ddOption} key={`ddOption${i}`}>
								<input
									className={css.ddOptionCheck}
									key={`ddOptionCheck${i}`}
									type="checkbox"
									name={`${d.id}`}
									onChange={optionChangeHandler}
									value={d.value || ""}
									checked={selectedStates[d.id]}
								/>
								<span className="input-text">{d.label}</span>
							</div>
						))
					) : (
						<span
							className={css.ddOptionText}
							style={style?.ddOptionText}
						>
							No Options
						</span>
					)}
				</div>
			)}
		</div>
	);
};

export default DropDown;
